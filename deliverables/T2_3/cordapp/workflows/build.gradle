apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_platform_version
    workflow {
        name "Scales Workflows"
        vendor "SCALES"
        licence "Apache 2"
        versionId 1
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            java.outputDir = file('bin/main')
        }
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
    test {
        java {
            srcDir 'src/test/java'
            java.outputDir = file('bin/main')
        }
        resources {
            srcDir rootProject.file("config/test")
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    testCompile "junit:junit:$junit_version"

    // Corda dependencies
    cordaCompile "net.corda:corda-core:$corda_core_release_version"
    cordaRuntime "net.corda:corda:$corda_release_version"

    testCompile "net.corda:corda-node-driver:$corda_release_version"

    // CorDapp dependencies
    cordapp project(":contracts")

    // Token SDK dependencies
    cordaCompile "com.r3.corda.lib.tokens:tokens-money:$tokens_release_version"
    cordaCompile "com.r3.corda.lib.tokens:tokens-workflows:$tokens_release_version"

    compile "net.sf.saxon:Saxon-HE:$saxon_version"
    compile "commons-io:commons-io:$commons_io_version"
    compile "com.squareup.okhttp3:okhttp:$okhttp_version"
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}